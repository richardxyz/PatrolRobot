package com.zkkc.green.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zkkc.patrolrobot.entity.ShootAngleDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOOT_ANGLE_DAO".
*/
public class ShootAngleDaoDao extends AbstractDao<ShootAngleDao, Long> {

    public static final String TABLENAME = "SHOOT_ANGLE_DAO";

    /**
     * Properties of entity ShootAngleDao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SerialNo = new Property(1, String.class, "serialNo", false, "SERIAL_NO");
        public final static Property TowerNo = new Property(2, String.class, "towerNo", false, "TOWER_NO");
        public final static Property TowerType = new Property(3, int.class, "towerType", false, "TOWER_TYPE");
        public final static Property Direction = new Property(4, int.class, "direction", false, "DIRECTION");
        public final static Property CameraType = new Property(5, int.class, "cameraType", false, "CAMERA_TYPE");
        public final static Property CameraX = new Property(6, int.class, "cameraX", false, "CAMERA_X");
        public final static Property CameraY = new Property(7, int.class, "cameraY", false, "CAMERA_Y");
        public final static Property CameraZ = new Property(8, int.class, "cameraZ", false, "CAMERA_Z");
        public final static Property PictureUri = new Property(9, String.class, "pictureUri", false, "PICTURE_URI");
    }


    public ShootAngleDaoDao(DaoConfig config) {
        super(config);
    }
    
    public ShootAngleDaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOOT_ANGLE_DAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SERIAL_NO\" TEXT," + // 1: serialNo
                "\"TOWER_NO\" TEXT," + // 2: towerNo
                "\"TOWER_TYPE\" INTEGER NOT NULL ," + // 3: towerType
                "\"DIRECTION\" INTEGER NOT NULL ," + // 4: direction
                "\"CAMERA_TYPE\" INTEGER NOT NULL ," + // 5: cameraType
                "\"CAMERA_X\" INTEGER NOT NULL ," + // 6: cameraX
                "\"CAMERA_Y\" INTEGER NOT NULL ," + // 7: cameraY
                "\"CAMERA_Z\" INTEGER NOT NULL ," + // 8: cameraZ
                "\"PICTURE_URI\" TEXT);"); // 9: pictureUri
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOOT_ANGLE_DAO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShootAngleDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindString(2, serialNo);
        }
 
        String towerNo = entity.getTowerNo();
        if (towerNo != null) {
            stmt.bindString(3, towerNo);
        }
        stmt.bindLong(4, entity.getTowerType());
        stmt.bindLong(5, entity.getDirection());
        stmt.bindLong(6, entity.getCameraType());
        stmt.bindLong(7, entity.getCameraX());
        stmt.bindLong(8, entity.getCameraY());
        stmt.bindLong(9, entity.getCameraZ());
 
        String pictureUri = entity.getPictureUri();
        if (pictureUri != null) {
            stmt.bindString(10, pictureUri);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShootAngleDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serialNo = entity.getSerialNo();
        if (serialNo != null) {
            stmt.bindString(2, serialNo);
        }
 
        String towerNo = entity.getTowerNo();
        if (towerNo != null) {
            stmt.bindString(3, towerNo);
        }
        stmt.bindLong(4, entity.getTowerType());
        stmt.bindLong(5, entity.getDirection());
        stmt.bindLong(6, entity.getCameraType());
        stmt.bindLong(7, entity.getCameraX());
        stmt.bindLong(8, entity.getCameraY());
        stmt.bindLong(9, entity.getCameraZ());
 
        String pictureUri = entity.getPictureUri();
        if (pictureUri != null) {
            stmt.bindString(10, pictureUri);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ShootAngleDao readEntity(Cursor cursor, int offset) {
        ShootAngleDao entity = new ShootAngleDao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serialNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // towerNo
            cursor.getInt(offset + 3), // towerType
            cursor.getInt(offset + 4), // direction
            cursor.getInt(offset + 5), // cameraType
            cursor.getInt(offset + 6), // cameraX
            cursor.getInt(offset + 7), // cameraY
            cursor.getInt(offset + 8), // cameraZ
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // pictureUri
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShootAngleDao entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSerialNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTowerNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTowerType(cursor.getInt(offset + 3));
        entity.setDirection(cursor.getInt(offset + 4));
        entity.setCameraType(cursor.getInt(offset + 5));
        entity.setCameraX(cursor.getInt(offset + 6));
        entity.setCameraY(cursor.getInt(offset + 7));
        entity.setCameraZ(cursor.getInt(offset + 8));
        entity.setPictureUri(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShootAngleDao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShootAngleDao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShootAngleDao entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
